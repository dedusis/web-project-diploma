openapi: 3.0.3
info:
  title: Diploma Management API 
  version: 1.0.0
  description: >    
    API for managing diploma assignments, users (students, professors, secretaries) and data imports.
servers:
  - url: http://localhost:3000
    description: Local server

paths:
  /auth/login:
    post:
      summary: User login
      description: Login for students, professors, and secretaries. Returns JWT token and user info.
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: secr2
                password:
                  type: string
                  example: test124
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login successful
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  role:
                    type: string
                    example: student
                  username:
                    type: string
                    example: stud1
                  name:
                    type: string
                    example: Γιάννης
        '400':
          description: Missing username or password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid username or password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/me:
    get:
      summary: Get logged-in user profile
      description: Returns the profile information of the currently authenticated user (student, professor, or secretary).
      tags:
        - Auth
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    example: 64f1c2c5a7e8a21b9c123456
                  username:
                    type: string
                    example: stud1
                  name:
                    type: string
                    example: Γιάννης
                  surname:
                    type: string
                    example: Παπαδόπουλος
                  role:
                    type: string
                    example: student
                  email:
                    type: string
                    example: giannis@example.com
        '401':
          description: Unauthorized - No token provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /Professor:
    post:
      summary: Create a new Professor
      tags:
        - Professor
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProfessorRequest'
      responses:
        '201':
          description: Professor created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Professor'
        '400':
          description: Bad request (e.g. username exists)

    get:
      summary: Get all professors
      description: Retrieve a list of all professors. Only secretaries can access this endpoint.
      tags:
        - Professor
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of professors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Professor'
        '403':
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /Professor/{username}:
    get:
      summary: Get a Professor by username
      tags:
        - Professor
      security:
        - bearerAuth: []
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          example: prof1
      responses:
        '200':
          description: Professor found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Professor'
        '404':
          description: Professor not found

    put:
      summary: Update a Professor by username
      tags:
        - Professor
      security:
        - bearerAuth: []
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          example: prof1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfessorRequest'
      responses:
        '200':
          description: Professor updated successfully
        '404':
          description: Professor not found

    delete:
      summary: Delete a Professor by username
      tags:
        - Professor
      security:
        - bearerAuth: []
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          example: prof1
      responses:
        '200':
          description: Professor deleted successfully
        '404':
          description: Professor not found

  /secretary:
    post:
      summary: Create a new secretary user
      tags:
        - Secretary
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
                - name
                - email
              properties:
                username:
                  type: string
                  example: secr1
                password:
                  type: string
                  example: test1234
                name:
                  type: string
                  example: Ελένη Γραμματεία
                email:
                  type: string
                  format: email
                  example: eleni@upatras.gr
                department:
                  type: string
                  example: Μηχανικών Η/Υ
      responses:
        '201':
          description: Secretary created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Secretary'
        '400':
          description: Bad request (e.g. username exists)

    get:
      summary: Get all secretaries
      description: Retrieve a list of all secretary users. Only secretaries can access this endpoint.
      tags:
        - Secretary
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of secretaries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Secretary'
        '403':
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /secretary/{username}:
    get:
      summary: Get a secretary by username
      tags:
        - Secretary
      security:
        - bearerAuth: []
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          example: secr1
      responses:
        '200':
          description: Secretary found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Secretary'
        '404':
          description: Secretary not found

    put:
      summary: Update a secretary by username
      tags:
        - Secretary
      security:
        - bearerAuth: []
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          example: secr1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Νέα Γραμματεία
                email:
                  type: string
                  example: newemail@upatras.gr
                department:
                  type: string
                  example: Νέο Τμήμα
                password:
                  type: string
                  example: newpassword
      responses:
        '200':
          description: Secretary updated successfully
        '404':
          description: Secretary not found

    delete:
      summary: Delete a secretary by username
      tags:
        - Secretary
      security:
        - bearerAuth: []
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          example: secr1
      responses:
        '200':
          description: Secretary deleted successfully
        '404':
          description: Secretary not found

  /import/upload:
    post:
      summary: Import data from JSON file
      description: Upload a JSON file containing students, professors, and/or theses. Only secretaries can perform this action.
      tags:
        - Import
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: JSON file containing the data to import
      responses:
        '200':
          description: Import completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Import completed successfully
                  summary:
                    type: object
                    properties:
                      students:
                        type: integer
                        example: 10
                      professors:
                        type: integer
                        example: 5
        '400':
          description: No file uploaded or invalid file
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /import:
    get:
      summary: Get all import logs
      description: Retrieve a list of all import logs. Only secretaries can view this.
      tags:
        - Import
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of import logs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ImportLog'
        '403':
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /import/{id}:
    get:
      summary: Get an import log by ID
      description: Retrieve details for a specific import log by ID. Only secretaries can view this.
      tags:
        - Import
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Import log ID
          example: 64f1c2c5a7e8a21b9c123456
      responses:
        '200':
          description: Import log details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportLog'
        '404':
          description: Import log not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete an import log by ID
      description: Permanently remove an import log. Only secretaries can delete logs.
      tags:
        - Import
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Import log ID
          example: 64f1c2c5a7e8a21b9c123456
      responses:
        '200':
          description: Import log deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: ImportLog deleted successfully
        '404':
          description: Import log not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /student:
    post:
      summary: Create a new student
      tags:
        - Student
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStudentRequest'
      responses:
        '201':
          description: Student created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '400':
          description: Bad request (e.g. username exists)

    get:
      summary: Get al l students
      description: Retrieve a list of all students. Only secretaries can access this endpoint.
      tags:
        - Student
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of students
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Student'
        '403':
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  /student/{username}:
    get:
      summary: Get a student by username
      tags:
        - Student
      security:
        - bearerAuth: []
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          example: stud1
      responses:
        '200':
          description: Student found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '404':
          description: Student not found

    put:
      summary: Update a student by username
      tags:
        - Student
      security:
        - bearerAuth: []
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          example: stud1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateStudentRequest'
      responses:
        '200':
          description: Student updated successfully
        '404':
          description: Student not found

    delete:
      summary: Delete a student by username
      tags:
        - Student
      security:
        - bearerAuth: []
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          example: stud1
      responses:
        '200':
          description: Student deleted successfully
        '404':
          description: Student not found
  /student/id/{id}:
    get:
      summary: Get a student by ID
      description: Retrieve a student by database ID (not username). Password field is excluded.
      tags:
        - Student
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: 64f1d4c5a7e8a21b9c654321
      responses:
        '200':
          description: Student found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '404':
          description: Student not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /theses:
    post:
      summary: Create a new theses
      tags:
        - Theses
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateThesesRequest'
      responses:
        '201':
          description: Theses created successfully
        '400':
          description: Bad request
        '403':
          description: Not authorized

    get:
      summary: Get all theses
      tags:
        - Theses
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of theses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Theses'
        '401':
          description: Unauthorized

  /theses/{id}:
    get:
      summary: Get theses by ID
      tags:
        - Theses
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: 64f1c2c5a7e8a21b9c123456
      responses:
        '200':
          description: Theses found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Theses'
        '404':
          description: Theses not found

    put:
      summary: Update theses by ID
      tags:
        - Theses
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateThesesRequest'
      responses:
        '200':
          description: Theses updated successfully
        '404':
          description: Theses not found
        '403':
          description: Not authorized

    delete:
      summary: Delete theses by ID
      tags:
        - Theses
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Theses deleted successfully
        '404':
          description: Theses not found
        '403':
          description: Not authorized

  /theses/{id}/assign:
    post:
      summary: Assign a thesis to a student
      description: Assigns a thesis to a student by IDs. Only professors or secretaries can perform this action.
      tags:
        - Theses
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Thesis ID
          example: 64f1c2c5a7e8a21b9c123456
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - studentId
              properties:
                studentId:
                  type: string
                  example: 64f1d4c5a7e8a21b9c654321
      responses:
        '200':
          description: Thesis assigned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Theses'
        '404':
          description: Thesis or student not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /theses/me:
    get:
      summary: Get the logged-in student's thesis
      description: Returns the thesis details for the currently authenticated student.
      tags:
        - Theses
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Thesis details
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  title:
                    type: string
                    example: Ανάπτυξη Συστήματος Τεχνητής Νοημοσύνης
                  description:
                    type: string
                    example: Περιγραφή διπλωματικής εργασίας
                  status:
                    type: string
                    enum: [pending, active, under_review, completed, cancelled]
                    example: active
                  professor:
                    type: object
                    properties:
                      name:
                        type: string
                        example: Γιάννης
                      surname:
                        type: string
                        example: Παπαδόπουλος
                      email:
                        type: string
                        example: giannis@example.com
                  committee:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          example: Μαρία
                        surname:
                          type: string
                          example: Κωνσταντίνου
                        email:
                          type: string
                          example: maria@example.com
                  attachment:
                    type: string
                    example: "http://localhost:3000/uploads/thesis123.pdf"
                  assignedDate:
                    type: string
                    format: date-time
                  daysSinceAssignment:
                    type: integer
                    example: 45
        '401':
          description: Unauthorized (no or invalid token)
        '404':
          description: No thesis found for this student

  /theses/{id}/activate:
    patch:
      summary: activate thesis assignment (by Secretary)
      description: Η Γραμματεία εγκρίνει την ανάθεση διπλωματικής, καταχωρώντας τον αριθμό και το έτος της ΓΣ.
      tags:
        - Theses
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: 64f1c2c5a7e8a21b9c123456
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ap_number
                - ap_year
              properties:
                ap_number:
                  type: string
                  example: "15"
                ap_year:
                  type: string
                  example: "2024"
      responses:
        '200':
          description: Thesis activated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Theses'
        '403':
          description: Not authorized

  /theses/{id}/cancel:
    patch:
      summary: Cancel thesis assignment (by Secretary)
      description: Η Γραμματεία ακυρώνει την ανάθεση διπλωματικής, με καταχώρηση ΓΣ και λόγου ακύρωσης.
      tags:
        - Theses
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: 64f1c2c5a7e8a21b9c123456
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ap_number
                - ap_year
                - cancel_reason
              properties:
                ap_number:
                  type: string
                  example: "22"
                ap_year:
                  type: string
                  example: "2024"
                cancel_reason:
                  type: string
                  example: "Κατόπιν αίτησης φοιτητή"
      responses:
        '200':
          description: Thesis cancelled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Theses'
        '403':
          description: Not authorized

  /theses/{id}/complete:
    patch:
      summary: Complete thesis (by Secretary)
      description: Η Γραμματεία ολοκληρώνει τη διπλωματική, καταχωρώντας βαθμό και σύνδεσμο στο Νημερτή.
      tags:
        - Theses
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: 64f1c2c5a7e8a21b9c123456
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - grade
                - nimertis_link
              properties:
                grade:
                  type: number
                  format: float
                  example: 8.5
                nimertis_link:
                  type: string
                  format: uri
                  example: "https://nemertes.lis.upatras.gr/jspui/handle/10889/12345"
      responses:
        '200':
          description: Thesis completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Theses'
        '403':
          description: Not authorized

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Professor:
      type: object
      properties:
        name:
          type: string
        surname:
          type: string
        topic:
          type: string
        landline:
          type: string
        mobile:
          type: string
        email:
          type: string
        department:
          type: string
        university:
          type: string
        username:
          type: string

    CreateProfessorRequest:
      type: object
      required:
        - username
        - password
        - name
        - surname
        - topic
        - landline
        - mobile
        - email
        - department
        - university
      properties:
        username:
          type: string
        password:
          type: string
        name:
          type: string
        surname:
          type: string
        topic:
          type: string
        landline:
          type: string
        mobile:
          type: string
        email:
          type: string
        department:
          type: string
        university:
          type: string

    UpdateProfessorRequest:
      type: object
      properties:
        name:
          type: string
        surname:
          type: string
        topic:
          type: string
        landline:
          type: string
        mobile:
          type: string
        email:
          type: string
        department:
          type: string
        university:
          type: string
        password:
          type: string

    ErrorResponse:
      type: object
      properties:
        error:
          type: string

    Secretary:
      type: object
      properties:
        _id:
          type: string
        username:
          type: string
        name:
          type: string
        email:
          type: string
        department:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string

    ImportLog:
      type: object
      properties:
        _id:
          type: string
          example: 64f1c2c5a7e8a21b9c123456
        filename:
          type: string
          example: students_batch_01.json
        type:
          type: string
          enum: [students, professors, mixed]
          example: mixed
        description:
          type: string
          example: Import from secretary's batch file
        importDate:
          type: string
          format: date-time
          example: 2025-08-13T10:00:00.000Z
        importedBy:
          type: object
          properties:
            _id:
              type: string
              example: 64f1b123a7e8a21b9c654321
            username:
              type: string
              example: secr1
            name:
              type: string
              example: Ελένη Γραμματεία
            email:
              type: string
              example: eleni@upatras.gr
        summary:
          type: object
          properties:
            students:
              type: integer
              example: 10
            professors:
              type: integer
              example: 5
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    
    Student:
      type: object
      properties:
        _id:
          type: string
        username:
          type: string
          example: stud1
        name:
          type: string
          example: leo
        surname:
          type: string
          example: ded
        student_number:
          type: string
          example: 1104780
        street:
          type: string
          example: kronou
        number:
          type: string
          example: 6969696969
        city:
          type: string
          example: Patra
        postcode:
          type: string
          example: 1148
        father_name:
          type: string
          example: leo
        landline_telephone:
          type: string
          example: 2102102102
        mobile_telephone:
          type: string
          example: 888888888
        email:
          type: string
          example: leo@adjudhj.gr
        createdAt:
          type: string
        updatedAt:
          type: string

    CreateStudentRequest:
      type: object
      required:
        - username
        - password
        - name
        - surname
        - student_number
        - email
      properties:
        username:
          type: string
          example: stud1
        password:
          type: string
          example: test1234
        name:
          type: string
          example: leo
        surname:
          type: string
          example: ded
        student_number:
          type: string
          example: 8888888
        street:
          type: string
          example: kronou
        number:
          type: string
          example: 6969696969
        city:
          type: string
          example: Patra
        postcode:
          type: string
          example: 11233
        father_name:
          type: string
          example: leo
        landline_telephone:
          type: string
          example: 2222222222
        mobile_telephone:
          type: string
          example: 8888888888
        email:
          type: string
          example: leo@leoleo.gr

    UpdateStudentRequest:
      type: object
      properties:
        name:
          type: string
        surname:
          type: string
        password:
          type: string
        student_number:
          type: string
        street:
          type: string
        number:
          type: string
        city:
          type: string
        postcode:
          type: string
        father_name:
          type: string
        landline_telephone:
          type: string
        mobile_telephone:
          type: string
        email:
          type: string

    Theses:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [pending, active, under_review, completed, cancelled]
        assignedDate:
          type: string
          format: date-time
        professor:
          type: string
        student:
          type: string
        ap_number:
          type: string
          description: Αριθμός Γενικής Συνέλευσης
          example: "15"
        ap_year:
          type: string
          description: Έτος Γενικής Συνέλευσης
          example: "2024"
        cancel_reason:
          type: string
          description: Λόγος ακύρωσης ανάθεσης
          example: "Κατόπιν αίτησης φοιτητή"
        grade:
          type: number
          format: float
          description: Βαθμός διπλωματικής
          example: 8.5
        nimertis_link:
          type: string
          format: uri
          description: Σύνδεσμος προς το αποθετήριο Νημερτής
          example: "https://nemertes.lis.upatras.gr/jspui/handle/10889/12345"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateThesesRequest:
      type: object
      required:
        - title
        - professor
      properties:
        title:
          type: string
        description:
          type: string
        professor:
          type: string
        

    UpdateThesesRequest:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        status:
          type: string

    
