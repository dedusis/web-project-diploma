openapi: 3.0.3
info:
  title: Diploma Management API 
  version: 1.0.0
  description: >    
    API for managing diploma assignments, users (students, professors, secretaries) and data imports.
servers:
  - url: http://localhost:3000
    description: Local server

paths:
  /auth/login:
    post:
      summary: User login
      description: Login for students, professors, and secretaries. Returns JWT token and user info.
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: secr2
                password:
                  type: string
                  example: test124
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login successful
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  role:
                    type: string
                    example: student
                  username:
                    type: string
                    example: stud1
                  name:
                    type: string
                    example: Γιάννης
        '400':
          description: Missing username or password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid username or password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/me:
    get:
      summary: Get logged-in user profile
      description: Returns the profile information of the currently authenticated user (student, professor, or secretary).
      tags:
        - Auth
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    example: 64f1c2c5a7e8a21b9c123456
                  username:
                    type: string
                    example: stud1
                  name:
                    type: string
                    example: Γιάννης
                  surname:
                    type: string
                    example: Παπαδόπουλος
                  role:
                    type: string
                    example: student
                  email:
                    type: string
                    example: giannis@example.com
        '401':
          description: Unauthorized - No token provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /Professor:
    post:
      summary: Create a new Professor
      tags:
        - Professor
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProfessorRequest'
      responses:
        '201':
          description: Professor created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Professor'
        '400':
          description: Bad request (e.g. username exists)

    get:
      summary: Get all professors
      description: Retrieve a list of all professors. Only secretaries can access this endpoint.
      tags:
        - Professor
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of professors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Professor'
        '403':
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /Professor/{username}:
    get:
      summary: Get a Professor by username
      tags:
        - Professor
      security:
        - bearerAuth: []
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          example: prof1
      responses:
        '200':
          description: Professor found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Professor'
        '404':
          description: Professor not found

    put:
      summary: Update a Professor by username
      tags:
        - Professor
      security:
        - bearerAuth: []
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          example: prof1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfessorRequest'
      responses:
        '200':
          description: Professor updated successfully
        '404':
          description: Professor not found

    delete:
      summary: Delete a Professor by username
      tags:
        - Professor
      security:
        - bearerAuth: []
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          example: prof1
      responses:
        '200':
          description: Professor deleted successfully
        '404':
          description: Professor not found

  /secretary:
    post:
      summary: Create a new secretary user
      tags:
        - Secretary
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
                - name
                - email
              properties:
                username:
                  type: string
                  example: secr1
                password:
                  type: string
                  example: test1234
                name:
                  type: string
                  example: Ελένη Γραμματεία
                email:
                  type: string
                  format: email
                  example: eleni@upatras.gr
                department:
                  type: string
                  example: Μηχανικών Η/Υ
      responses:
        '201':
          description: Secretary created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Secretary'
        '400':
          description: Bad request (e.g. username exists)

    get:
      summary: Get all secretaries
      description: Retrieve a list of all secretary users. Only secretaries can access this endpoint.
      tags:
        - Secretary
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of secretaries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Secretary'
        '403':
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /secretary/{username}:
    get:
      summary: Get a secretary by username
      tags:
        - Secretary
      security:
        - bearerAuth: []
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          example: secr1
      responses:
        '200':
          description: Secretary found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Secretary'
        '404':
          description: Secretary not found

    put:
      summary: Update a secretary by username
      tags:
        - Secretary
      security:
        - bearerAuth: []
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          example: secr1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Νέα Γραμματεία
                email:
                  type: string
                  example: newemail@upatras.gr
                department:
                  type: string
                  example: Νέο Τμήμα
                password:
                  type: string
                  example: newpassword
      responses:
        '200':
          description: Secretary updated successfully
        '404':
          description: Secretary not found

    delete:
      summary: Delete a secretary by username
      tags:
        - Secretary
      security:
        - bearerAuth: []
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          example: secr1
      responses:
        '200':
          description: Secretary deleted successfully
        '404':
          description: Secretary not found

  /import/upload:
    post:
      summary: Import data from JSON file
      description: Upload a JSON file containing students, professors, and/or theses. Only secretaries can perform this action.
      tags:
        - Import
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: JSON file containing the data to import
      responses:
        '200':
          description: Import completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Import completed successfully
                  summary:
                    type: object
                    properties:
                      students:
                        type: integer
                        example: 10
                      professors:
                        type: integer
                        example: 5
        '400':
          description: No file uploaded or invalid file
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /import:
    get:
      summary: Get all import logs
      description: Retrieve a list of all import logs. Only secretaries can view this.
      tags:
        - Import
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of import logs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ImportLog'
        '403':
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /import/{id}:
    get:
      summary: Get an import log by ID
      description: Retrieve details for a specific import log by ID. Only secretaries can view this.
      tags:
        - Import
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Import log ID
          example: 64f1c2c5a7e8a21b9c123456
      responses:
        '200':
          description: Import log details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportLog'
        '404':
          description: Import log not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete an import log by ID
      description: Permanently remove an import log. Only secretaries can delete logs.
      tags:
        - Import
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Import log ID
          example: 64f1c2c5a7e8a21b9c123456
      responses:
        '200':
          description: Import log deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: ImportLog deleted successfully
        '404':
          description: Import log not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /student:
    post:
      summary: Create a new student
      tags:
        - Student
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStudentRequest'
      responses:
        '201':
          description: Student created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '400':
          description: Bad request (e.g. username exists)

    get:
      summary: Get al l students
      description: Retrieve a list of all students. Only secretaries can access this endpoint.
      tags:
        - Student
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of students
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Student'
        '403':
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /student/me:
    patch:
      summary: Update logged-in student's profile
      description: >
        Επιτρέπει στον φοιτητή να ενημερώσει τα στοιχεία του λογαριασμού του.  
        Μόνο συγκεκριμένα πεδία μπορούν να τροποποιηθούν: street, number, city, postcode, email, landline_telephone, mobile_telephone, password.
      tags:
        - Student
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                street:
                  type: string
                  example: "Panepistimiou"
                number:
                  type: string
                  example: "25"
                city:
                  type: string
                  example: "Patras"
                postcode:
                  type: string
                  example: "26223"
                email:
                  type: string
                  format: email
                  example: "student@example.com"
                landline_telephone:
                  type: string
                  example: "2610123456"
                mobile_telephone:
                  type: string
                  example: "6912345678"
                password:
                  type: string
                  format: password
                  example: "newStrongPassword123"
      responses:
        "200":
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Profile updated successfully"
                  student:
                    type: object
                    properties:
                      id:
                        type: string
                        example: "64a7c92f8b7c2a001f9d1234"
                      username:
                        type: string
                        example: "stud01"
                      name:
                        type: string
                        example: "Nikos"
                      surname:
                        type: string
                        example: "Papadopoulos"
                      email:
                        type: string
                        example: "student@example.com"
                      city:
                        type: string
                        example: "Patras"
        "400":
          description: Invalid request (validation error)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid email format"
        "401":
          description: Unauthorized – Missing or invalid token
        "403":
          description: Forbidden – Only students can access this endpoint
        "404":
          description: Student not found


  /student/{username}:
    get:
      summary: Get a student by username
      tags:
        - Student
      security:
        - bearerAuth: []
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          example: stud1
      responses:
        '200':
          description: Student found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '404':
          description: Student not found

    put:
      summary: Update a student by username
      tags:
        - Student
      security:
        - bearerAuth: []
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          example: stud1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateStudentRequest'
      responses:
        '200':
          description: Student updated successfully
        '404':
          description: Student not found

    delete:
      summary: Delete a student by username
      tags:
        - Student
      security:
        - bearerAuth: []
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          example: stud1
      responses:
        '200':
          description: Student deleted successfully
        '404':
          description: Student not found

  /student/id/{id}:
    get:
      summary: Get a student by ID
      description: Retrieve a student by database ID (not username). Password field is excluded.
      tags:
        - Student
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: 64f1d4c5a7e8a21b9c654321
      responses:
        '200':
          description: Student found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '404':
          description: Student not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /theses:
    post:
      summary: Create a new theses
      tags:
        - Theses
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateThesesRequest'
      responses:
        '201':
          description: Theses created successfully
        '400':
          description: Bad request
        '403':
          description: Not authorized

    get:
      summary: Gets all theses that status is "active" or "under_review"
      tags:
        - Secretary
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: [active, under_review]
          required: false
          description: filter for getting theses "active" or "under_review". 
      responses:
        "200":
          description: Theses List
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Theses"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden (only secretary has access)

  /theses/me/invite:
    patch:
      summary: Student invites professors to committee
      security:
        - bearerAuth: []
      tags:
        - Theses (Student)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - emails
              properties:
                emails:
                  type: array
                  items:
                    type: string
                    format: email
                    example: "professor1@uni.gr"
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    example: "64f23b7c12a9b21e0c9a1234"
                  title:
                    type: string
                    example: "Σύστημα Διαχείρισης Διπλωματικών"
                  committee:
                    type: array
                    items:
                      type: object
                      properties:
                        professor:
                          type: object
                          properties:
                            _id:
                              type: string
                              example: "64f23b7c12a9b21e0c9a5678"
                            name:
                              type: string
                              example: "Γιάννης"
                            surname:
                              type: string
                              example: "Παπαδόπουλος"
                            email:
                              type: string
                              example: "professor1@uni.gr"
                        status:
                          type: string
                          enum: [pending, accepted, rejected]
                          example: "pending"
        "400":
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No professors found with these emails"
        "403":
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Professor professor1@uni.gr is the supervisor and cannot be invited to the committee"


  /theses/{id}/respond:
    patch:
      summary: Professor responds to committee invitation
      security:
        - bearerAuth: []
      tags:
        - Theses
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Thesis ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                response:
                  type: string
                  enum: [accepted, rejected]
                  example: accepted
      responses:
        '200':
          description: Invitation response recorded

  /theses/{id}:
    get:
      summary: Get theses by ID
      tags:
        - Theses
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: 64f1c2c5a7e8a21b9c123456
      responses:
        '200':
          description: Theses found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Theses'
        '404':
          description: Theses not found

    put:
      summary: Update theses by ID
      tags:
        - Theses
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateThesesRequest'
      responses:
        '200':
          description: Theses updated successfully
        '404':
          description: Theses not found
        '403':
          description: Not authorized

    delete:
      summary: Delete theses by ID
      tags:
        - Theses
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Theses deleted successfully
        '404':
          description: Theses not found
        '403':
          description: Not authorized

  /theses/{id}/assign:
    post:
      summary: Assign a thesis to a student
      description: Assigns a thesis to a student by IDs. Only professors or secretaries can perform this action.
      tags:
        - Theses
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Thesis ID
          example: 64f1c2c5a7e8a21b9c123456
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - studentId
              properties:
                studentId:
                  type: string
                  example: 64f1d4c5a7e8a21b9c654321
      responses:
        '200':
          description: Thesis assigned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Theses'
        '404':
          description: Thesis or student not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /theses/me:
    get:
      summary: Get the logged-in student's thesis
      description: Returns the thesis details for the currently authenticated student.
      tags:
        - Theses (Student)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Thesis details
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  title:
                    type: string
                    example: Ανάπτυξη Συστήματος Τεχνητής Νοημοσύνης
                  description:
                    type: string
                    example: Περιγραφή διπλωματικής εργασίας
                  status:
                    type: string
                    enum: [pending, active, under_review, completed, cancelled]
                    example: active
                  professor:
                    type: object
                    properties:
                      name:
                        type: string
                        example: Γιάννης
                      surname:
                        type: string
                        example: Παπαδόπουλος
                      email:
                        type: string
                        example: giannis@example.com
                  committee:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          example: Μαρία
                        surname:
                          type: string
                          example: Κωνσταντίνου
                        email:
                          type: string
                          example: maria@example.com
                  attachment:
                    type: string
                    example: "http://localhost:3000/uploads/thesis123.pdf"
                  assignedDate:
                    type: string
                    format: date-time
                  daysSinceAssignment:
                    type: integer
                    example: 45
        '401':
          description: Unauthorized (no or invalid token)
        '404':
          description: No thesis found for this student

  /theses/me/draft:
    patch:
      summary: Student uploads draft thesis file and additional links
      description: >
        Ο φοιτητής ανεβάζει το πρόχειρο κείμενο (ως URL/path αρχείου)
        και προαιρετικά συνδέσμους προς εξωτερικό υλικό (Google Drive, YouTube κλπ).
        Με την καταχώρηση, η διπλωματική περνάει σε status **under_review**.
      tags:
        - Theses (Student)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                draftFile:
                  type: string
                  example: "https://fileserver.com/thesis_draft_123.pdf"
                extraLinks:
                  type: array
                  items:
                    type: string
                  example: ["https://drive.google.com/file/xyz", "https://youtu.be/abcd1234"]
      responses:
        '200':
          description: Draft uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Draft uploaded successfully"
                theses:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: "68a63250f91675bd18b2fb60"
                      title:
                        type: string
                        example: "Εφαρμογή Τεχνητής Νοημοσύνης σε Ιατρικές Διαγνώσεις"
                      status:
                        type: string
                        example: "under_review"
                      draftFile:
                        type: string
                        example: "https://fileserver.com/thesis_draft_123.pdf"
                      extraLinks:
                        type: array
                        items:
                          type: string
                        example: ["https://drive.google.com/file/xyz", "https://youtu.be/abcd1234"]
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No thesis found for this student"

  /theses/me/exam:
    patch:
      summary: "Student sets exam details"
      description: >
        Ο φοιτητής καταχωρεί ημερομηνία, τρόπο και χώρο εξέτασης. 
        Επιτρέπεται μόνο όταν η διπλωματική είναι σε κατάσταση "under_review".
      tags:
        - Theses (Student)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                examDate:
                  type: string
                  format: date-time
                  example: "2025-09-15T10:00:00.000Z"
                examMode:
                  type: string
                  enum: ["in_person", "online"]
                  example: "in_person"
                examLocation:
                  type: string
                  example: "Αίθουσα Β2, Τμήμα Πληροφορικής"
      responses:
        "200":
          description: "Exam details set successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Exam details set successfully"
                  theses:
                    $ref: "#/components/schemas/Theses"
        "400":
          description: "Bad request (e.g. thesis not under review)"
        "404":
          description: "Thesis not found"

  /theses/me/praktiko:
    get:
      summary: "Student gets praktiko (HTML)"
      description: >
        Ο φοιτητής βλέπει το πρακτικό εξέτασης (HTML).  
        Το πρακτικό είναι διαθέσιμο μόνο αν η διπλωματική έχει ολοκληρωθεί (`status = completed`).
      tags:
        - Theses (Student)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: "Επιστροφή πρακτικού σε μορφή HTML"
          content:
            text/html:
              schema:
                type: string
                example: |
                  <html>
                    <head><title>Πρακτικό Εξέτασης</title></head>
                    <body>
                      <h1>Πρακτικό Εξέτασης</h1>
                      <h2>Τίτλος: Web</h2>
                      <p><b>Φοιτητής:</b> Γιάννης Παπαδόπουλος (gp@example.com)</p>
                      <p><b>Επιβλέπων:</b> Νίκος Καθηγητής (nk@example.com)</p>
                      <h3>Βαθμολογίες</h3>
                      <ul>
                        <li>Νίκος Καθηγητής (Σύνολο: 8.5)</li>
                        <li>Μαρία Επιτροπή (Σύνολο: 9.0)</li>
                        <li>Πέτρος Επιτροπή (Σύνολο: 8.0)</li>
                      </ul>
                      <h2>Τελικός Βαθμός: 8.5</h2>
                    </body>
                  </html>
        '400':
          description: "Σφάλμα - δεν βρέθηκε ή δεν έχει ολοκληρωθεί η διπλωματική"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Praktiko is available only after thesis is completed"
        '401':
          description: "Unauthorized - απαιτείται σύνδεση φοιτητή"

  /theses/me/nimertis:
    patch:
      summary: Student sets Nimertis link
      description: Ο φοιτητής καταχωρεί το URL στο αποθετήριο της βιβλιοθήκης (Νημερτής), μόνο αφού η διπλωματική είναι completed.
      security:
        - bearerAuth: []
      tags:
        - Theses (Student)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nimertis_link:
                  type: string
                  example: "https://nemertes.library.upatras.gr/jspui/handle/10889/12345"
      responses:
        "200":
          description: Nimertis link added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Nimertis link set successfully"
                  thesis:
                    $ref: "#/components/schemas/Thesis"
        "400":
          description: Bad Request

  /theses/{id}/open-grading:
    patch:
      summary: Supervisor opens grading for the thesis
      tags:
        - Theses
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Thesis ID
      responses:
        "200":
          description: Grading opened successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Grading is now open for this thesis
                  theses:
                    $ref: "#/components/schemas/Theses"
        "400":
          description: Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /theses/{id}/grade:
    patch:
      summary: Professor set grads for thesis 
      tags:
        - Theses
      description: >
        Ο επιβλέπων καθηγητής ή μέλος της τριμελούς καταχωρεί βαθμό για τη διπλωματική.
        Το `total` υπολογίζεται αυτόματα από τα κριτήρια. Όταν όλοι οι 3 καθηγητές βαθμολογήσουν,
        υπολογίζεται το `finalGrade` και η διπλωματική ολοκληρώνεται.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID της διπλωματικής
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                criteria:
                  type: object
                  required:
                    - originality
                    - methodology
                    - presentation
                    - knowledge
                  properties:
                    originality:
                      type: number
                      minimum: 0
                      maximum: 10
                    methodology:
                      type: number
                      minimum: 0
                      maximum: 10
                    presentation:
                      type: number
                      minimum: 0
                      maximum: 10
                    knowledge:
                      type: number
                      minimum: 0
                      maximum: 10
              example:
                criteria:
                  originality: 8
                  methodology: 7
                  presentation: 9
                  knowledge: 8
      responses:
        '200':
          description: Ενημερωμένη διπλωματική με το νέο βαθμό
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Grade submitted successfully"
                  thesis:
                    type: object
                    properties:
                      _id:
                        type: string
                      title:
                        type: string
                      status:
                        type: string
                        enum: ["pending", "active", "under_review", "completed", "cancelled"]
                      grades:
                        type: array
                        items:
                          type: object
                          properties:
                            professor:
                              type: string
                            criteria:
                              type: object
                              properties:
                                originality:
                                  type: number
                                methodology:
                                  type: number
                                presentation:
                                  type: number
                                knowledge:
                                  type: number
                            total:
                              type: number
                      finalGrade:
                        type: number
        '400':
          description: Input error or the teacher does not belong to the committee
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "You are not part of this committee"

  /theses/{id}/grades:
    get:
      summary: Get all grades for a thesis
      description: >
        Επιτρέπει σε μέλος της τριμελούς (επιβλέπων ή καθηγητής committee) να δει
        όλους τους βαθμούς που έχουν καταχωρηθεί για τη συγκεκριμένη διπλωματική.
      tags:
        - Theses
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Το ID της διπλωματικής
          schema:
            type: string
      responses:
        "200":
          description: Grades retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  thesisId:
                    type: string
                  grades:
                    type: array
                    items:
                      type: object
                      properties:
                        professor:
                          type: object
                          properties:
                            _id:
                              type: string
                            name:
                              type: string
                            surname:
                              type: string
                            email:
                              type: string
                        criteria:
                          type: object
                          properties:
                            originality:
                              type: number
                            methodology:
                              type: number
                            presentation:
                              type: number
                            knowledge:
                              type: number
                        total:
                          type: number
                          format: float
                  finalGrade:
                    type: number
                    format: float
                    description: Ο τελικός βαθμός (αν έχουν βαθμολογήσει και οι 3)
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "401":
          description: Unauthorized – Δεν υπάρχει ή δεν είναι έγκυρο το token
        "403":
          description: Forbidden – Ο καθηγητής δεν ανήκει στην τριμελή
        "404":
          description: Thesis not found

  /theses/{id}/activate:
    patch:
      summary: activate thesis assignment (by Secretary)
      description: Η Γραμματεία εγκρίνει την ανάθεση διπλωματικής, καταχωρώντας τον αριθμό και το έτος της ΓΣ.
      tags:
        - Theses
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: 64f1c2c5a7e8a21b9c123456
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ap_number
                - ap_year
              properties:
                ap_number:
                  type: string
                  example: "15"
                ap_year:
                  type: string
                  example: "2024"
      responses:
        '200':
          description: Thesis activated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Theses'
        '403':
          description: Not authorized

  /theses/{id}/cancel:
    patch:
      summary: Cancel thesis assignment (by Secretary)
      description: Η Γραμματεία ακυρώνει την ανάθεση διπλωματικής, με καταχώρηση ΓΣ και λόγου ακύρωσης.
      tags:
        - Theses
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: 64f1c2c5a7e8a21b9c123456
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ap_number
                - ap_year
                - cancel_reason
              properties:
                ap_number:
                  type: string
                  example: "22"
                ap_year:
                  type: string
                  example: "2024"
                cancel_reason:
                  type: string
                  example: "Κατόπιν αίτησης φοιτητή"
      responses:
        '200':
          description: Thesis cancelled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Theses'
        '403':
          description: Not authorized

  /theses/{id}/complete:
    patch:
      summary: Ολοκλήρωση ΔΕ (μόνο από τη Γραμματεία)
      tags:
        - Theses
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID της διπλωματικής
      responses:
        "200":
          description: Η διπλωματική ολοκληρώθηκε
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Thesis"
        '403':
          description: Not authorized


  /theses/{id}/completed:
    get:
      summary: View completed thesis info and exam record
      description: Διαθέσιμο μόνο αν η διπλωματική είναι σε κατάσταση "completed". Επιστρέφει πληροφορίες, βαθμολογία και πρακτικό εξέτασης.
      security:
        - bearerAuth: []
      tags:
        - Theses
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Thesis ID
      responses:
        "200":
          description: Completed thesis details
          content:
            application/json:
              schema:
                type: object
                properties:
                  title:
                    type: string
                  description:
                    type: string
                  student:
                    $ref: "#/components/schemas/Student"
                  professor:
                    $ref: "#/components/schemas/Professor"
                  committee:
                    type: array
                    items:
                      $ref: "#/components/schemas/Professor"
                  finalGrade:
                    type: number
                  examDate:
                    type: string
                    format: date-time
                  examLocation:
                    type: string
                  examMode:
                    type: string
                  examRecordHtml:
                    type: string
                    example: "<html><body><h1>Πρακτικό εξέτασης</h1></body></html>"
        "400":
          description: Bad Request

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Professor:
      type: object
      properties:
        name:
          type: string
        surname:
          type: string
        topic:
          type: string
        landline:
          type: string
        mobile:
          type: string
        email:
          type: string
        department:
          type: string
        university:
          type: string
        username:
          type: string

    CreateProfessorRequest:
      type: object
      required:
        - username
        - password
        - name
        - surname
        - topic
        - landline
        - mobile
        - email
        - department
        - university
      properties:
        username:
          type: string
        password:
          type: string
        name:
          type: string
        surname:
          type: string
        topic:
          type: string
        landline:
          type: string
        mobile:
          type: string
        email:
          type: string
        department:
          type: string
        university:
          type: string

    UpdateProfessorRequest:
      type: object
      properties:
        name:
          type: string
        surname:
          type: string
        topic:
          type: string
        landline:
          type: string
        mobile:
          type: string
        email:
          type: string
        department:
          type: string
        university:
          type: string
        password:
          type: string

    ErrorResponse:
      type: object
      properties:
        error:
          type: string

    Secretary:
      type: object
      properties:
        _id:
          type: string
        username:
          type: string
        name:
          type: string
        email:
          type: string
        department:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string

    ImportLog:
      type: object
      properties:
        _id:
          type: string
          example: 64f1c2c5a7e8a21b9c123456
        filename:
          type: string
          example: students_batch_01.json
        type:
          type: string
          enum: [students, professors, mixed]
          example: mixed
        description:
          type: string
          example: Import from secretary's batch file
        importDate:
          type: string
          format: date-time
          example: 2025-08-13T10:00:00.000Z
        importedBy:
          type: object
          properties:
            _id:
              type: string
              example: 64f1b123a7e8a21b9c654321
            username:
              type: string
              example: secr1
            name:
              type: string
              example: Ελένη Γραμματεία
            email:
              type: string
              example: eleni@upatras.gr
        summary:
          type: object
          properties:
            students:
              type: integer
              example: 10
            professors:
              type: integer
              example: 5
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    
    Student:
      type: object
      properties:
        _id:
          type: string
        username:
          type: string
          example: stud1
        name:
          type: string
          example: leo
        surname:
          type: string
          example: ded
        student_number:
          type: string
          example: 1104780
        street:
          type: string
          example: kronou
        number:
          type: string
          example: 6969696969
        city:
          type: string
          example: Patra
        postcode:
          type: string
          example: 1148
        father_name:
          type: string
          example: leo
        landline_telephone:
          type: string
          example: 2102102102
        mobile_telephone:
          type: string
          example: 888888888
        email:
          type: string
          example: leo@adjudhj.gr
        createdAt:
          type: string
        updatedAt:
          type: string

    CreateStudentRequest:
      type: object
      required:
        - username
        - password
        - name
        - surname
        - student_number
        - email
      properties:
        username:
          type: string
          example: stud1
        password:
          type: string
          example: test1234
        name:
          type: string
          example: leo
        surname:
          type: string
          example: ded
        student_number:
          type: string
          example: 8888888
        street:
          type: string
          example: kronou
        number:
          type: string
          example: 6969696969
        city:
          type: string
          example: Patra
        postcode:
          type: string
          example: 11233
        father_name:
          type: string
          example: leo
        landline_telephone:
          type: string
          example: 2222222222
        mobile_telephone:
          type: string
          example: 8888888888
        email:
          type: string
          example: leo@leoleo.gr

    UpdateStudentRequest:
      type: object
      properties:
        name:
          type: string
        surname:
          type: string
        password:
          type: string
        student_number:
          type: string
        street:
          type: string
        number:
          type: string
        city:
          type: string
        postcode:
          type: string
        father_name:
          type: string
        landline_telephone:
          type: string
        mobile_telephone:
          type: string
        email:
          type: string

    Grade:
      type: object
      required:
        - professor
        - criteria
        - total
      properties:
        professor:
          type: string
          description: ID του καθηγητή
        criteria:
          type: object
          required:
            - originality
            - methodology
            - presentation
            - knowledge
          properties:
            originality:
              type: number
              minimum: 0
              maximum: 10
            methodology:
              type: number
              minimum: 0
              maximum: 10
            presentation:
              type: number
              minimum: 0
              maximum: 10
            knowledge:
              type: number
              minimum: 0
              maximum: 10

    CommitteeMember:
      type: object
      properties:
        professor:
          type: string
          description: ID του καθηγητή μέλους της τριμελούς
        status:
          type: string
          enum: ["pending", "accepted", "rejected"]
          default: "pending"

    Theses:
      type: object
      required:
        - title
        - professor
      properties:
        _id:
          type: string
        title:
          type: string
        description:
          type: string
        status:
          type: string
          enum: ["pending", "active", "under_review", "completed", "cancelled"]
          default: "pending"
        assignedDate:
          type: string
          format: date-time
        professor:
          type: string
          description: ID του επιβλέποντα καθηγητή
        gradingOpen:
          type: boolean
          default: false
        student:
          type: string
          nullable: true
        ap_number:
          type: number
        ap_year:
          type: number
        cancel_reason:
          type: string
        grades:
          type: array
          items:
            $ref: '#/components/schemas/Grade'
        nimertis_link:
          type: string
        committee:
          type: array
          items:
            $ref: '#/components/schemas/CommitteeMember'
        attachment:
          type: string
        draftFile:
          type: string
        finalGrade:
          type: number
          description: Τελικός μέσος όρος βαθμού από όλα τα μέλη της τριμελούς και τον επιβλέποντα
        extraLinks:
          type: array
          items:
            type: string
        examDate:
          type: string
          format: date-time
        examMode:
          type: string
          enum: ["in_person", "online"]
        examLocation:
          type: string
      example:
        _id: "64f8b1a0c1234abc56789012"
        title: "Σχεδίαση και Ανάπτυξη Web App"
        description: "Διπλωματική εργασία για το ΤΜΗΥΠ"
        status: "under_review"
        assignedDate: "2025-08-26T12:00:00Z"
        professor: "64f8a0b1c1234abc56789001"
        gradingOpen: true
        student: "64f8c1d2c1234abc56789009"
        ap_number: 123
        ap_year: 2025
        cancel_reason: null
        grades:
          - professor: "64f8a0b1c1234abc56789001"
            criteria:
              originality: 8
              methodology: 7
              presentation: 9
              knowledge: 8
            total: 8
        nimertis_link: "https://example.com/nimertis"
        committee:
          - professor: "64f8a0b1c1234abc56789002"
            status: "accepted"
          - professor: "64f8a0b1c1234abc56789003"
            status: "accepted"
        attachment: "https://example.com/attachment.pdf"
        draftFile: "https://example.com/draft.pdf"
        finalGrade: 8.33
        extraLinks:
          - "https://example.com/resource1"
          - "https://example.com/resource2"
        examDate: "2025-09-10T10:00:00Z"
        examMode: "online"
        examLocation: "Zoom"

    CreateThesesRequest:
      type: object
      required:
        - title
        - professor
      properties:
        title:
          type: string
        description:
          type: string
        professor:
          type: string
        

    UpdateThesesRequest:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        status:
          type: string

    
