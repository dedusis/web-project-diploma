openapi: 3.0.3
info:
  title: Diploma Management API 
  version: 1.0.0
  description: >    
    API for managing diploma assignments, users (students, professors, secretaries) and data imports.
servers:
  - url: http://localhost:3000
    description: Local server

paths:
  /Professor:
    post:
      summary: Create a new Professor user
      description: add new Professor.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProfessorRequest'
      responses:
        "201":
          description: professor created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Professor'
        "400":
          description: Bad request (e.g. username exists)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /Professor/{username}:
    get:
      summary: Get professor by username
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
          example: jdoe
      responses:
        "200":
          description: professor found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Professor'
        "404":
          description: professor not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update professor by username
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
          example: jdoe
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfessorRequest'
      responses:
        "200":
          description: professor updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Professor'
        "404":
          description: professor not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: delete professor by username
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
          example: jdoe
      responses:
        "200":
          description: professor deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Professor deleted successfully
        "404":
          description: professor not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /secretary:
    post:
      summary: Create a new secretary user
      tags:
        - Secretary
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
                - name
                - email
              properties:
                username:
                  type: string
                  example: secr1
                password:
                  type: string
                  example: test1234
                name:
                  type: string
                  example: Ελένη Γραμματεία
                email:
                  type: string
                  format: email
                  example: eleni@upatras.gr
                department:
                  type: string
                  example: Μηχανικών Η/Υ
      responses:
        '201':
          description: Secretary created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Secretary'
        '400':
          description: Bad request (e.g. username exists)

  /secretary/{username}:
    get:
      summary: Get a secretary by username
      tags:
        - Secretary
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          example: secr1
      responses:
        '200':
          description: Secretary found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Secretary'
        '404':
          description: Secretary not found

    put:
      summary: Update a secretary by username
      tags:
        - Secretary
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          example: secr1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Νέα Γραμματεία
                email:
                  type: string
                  example: newemail@upatras.gr
                department:
                  type: string
                  example: Νέο Τμήμα
                password:
                  type: string
                  example: newpassword
      responses:
        '200':
          description: Secretary updated successfully
        '404':
          description: Secretary not found

    delete:
      summary: Delete a secretary by username
      tags:
        - Secretary
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          example: secr1
      responses:
        '200':
          description: Secretary deleted successfully
        '404':
          description: Secretary not found

  /student:
    post:
      summary: Create a new student
      tags:
        - Student
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
                - name
                - surname
                - student_number
                - email
              properties:
                username:
                  type: string
                  example: stud1
                password:
                  type: string
                  example: pass1234
                name:
                  type: string
                  example: Γιάννης
                surname:
                  type: string
                  example: Παπαδόπουλος
                student_number:
                  type: string
                  example: 123456
                street:
                  type: string
                  example: Πατησίων
                number:
                  type: string
                  example: "12"
                city:
                  type: string
                  example: Αθήνα
                postcode:
                  type: string
                  example: "10434"
                father_name:
                  type: string
                  example: Νικόλαος
                landline_telephone:
                  type: string
                  example: "2101234567"
                mobile_telephone:
                  type: string
                  example: "6912345678"
                email:
                  type: string
                  example: giannis@example.com
      responses:
        '201':
          description: Student created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '400':
          description: Bad request (e.g. username exists)

  /student/{username}:
    get:
      summary: Get a student by username
      tags:
        - Student
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          example: stud1
      responses:
        '200':
          description: Student found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '404':
          description: Student not found

    put:
      summary: Update a student by username
      tags:
        - Student
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          example: stud1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Νέο Όνομα
                surname:
                  type: string
                  example: Νέο Επίθετο
                password:
                  type: string
                  example: newpass
                student_number:
                  type: string
                  example: 654321
                street:
                  type: string
                  example: Ακαδημίας
                number:
                  type: string
                  example: "45"
                city:
                  type: string
                  example: Πάτρα
                postcode:
                  type: string
                  example: "26221"
                father_name:
                  type: string
                  example: Δημήτρης
                landline_telephone:
                  type: string
                  example: "2610123456"
                mobile_telephone:
                  type: string
                  example: "6998765432"
                email:
                  type: string
                  example: newmail@example.com
      responses:
        '200':
          description: Student updated successfully
        '404':
          description: Student not found

    delete:
      summary: Delete a student by username
      tags:
        - Student
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          example: stud1
      responses:
        '200':
          description: Student deleted successfully
        '404':
          description: Student not found

components:
  schemas:
    Professor:
      type: object
      properties:
        name:
          type: string
          example: John
        surname:
          type: string
          example: Doe
        topic:
          type: string
          example: Computer Science
        landline:
          type: string
          example: "2101234567"
        mobile:
          type: string
          example: "6912345678"
        email:
          type: string
          format: email
          example: jdoe@example.com
        department:
          type: string
          example: Computer Science
        university:
          type: string
          ecample: University of Patras
        username:
          type: string
          example: jdoe

    CreateProfessorRequest:
      type: object
      required:
        - name
        - surname
        - topic
        - landline
        - mobile
        - email
        - department
        - university
        - username
        - password
      properties:
        name:
          type: string
          example: John
        surname:
          type: string
          example: Doe
        topic:
          type: string
          example: Computer Science
        landline:
          type: string
          example: "2101234567"
        mobile:
          type: string
          example: "6912345678"
        email:
          type: string
          format: email
          example: jdoe@example.com
        department:
          type: string
          example: Computer Science
        university:
          type: string
          ecample: University of Patras
        username:
          type: string
          example: jdoe
        password:
          type: string
          example: mySecurePass123

    UpdateProfessorRequest:
      type: object
      properties:
        name:
          type: string
          example: John Updated
        surname:
          type: string
          example: Doe Updated
        topic:
          type: string
          example: Mathematics
        landline:
          type: string
          example: "2107654321"
        mobile:
          type: string
          example: "6998765432"
        email:
          type: string
          format: email
          example: jdoe_updated@example.com
        department:
          type: string
          example: Mathematics
        university:
          type: string
          ecample: University of Patras
        password:
          type: string
          example: newSecurePass456

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: professor not found

    Secretary:
      type: object
      properties:
        _id:
          type: string
        username:
          type: string
        name:
          type: string
        email:
          type: string
        department:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Student:
      type: object
      properties:
        _id:
          type: string
        username:
          type: string
        name:
          type: string
        surname:
          type: string
        student_number:
          type: string
        street:
          type: string
        number:
          type: string
        city:
          type: string
        postcode:
          type: string
        father_name:
          type: string
        landline_telephone:
          type: string
        mobile_telephone:
          type: string
        email:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time