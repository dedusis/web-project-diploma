openapi: 3.0.3
info:
  title: Diploma Management API 
  version: 1.0.0
  description: >    
    API for managing diploma assignments, users (students, professors, secretaries) and data imports.
servers:
  - url: http://localhost:3000
    description: Local server

paths:
  /auth/login:
    post:
      summary: User login
      description: Login for students, professors, and secretaries. Returns JWT token and user info.
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: stud1
                password:
                  type: string
                  example: pass1234
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login successful
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  role:
                    type: string
                    example: student
                  username:
                    type: string
                    example: stud1
                  name:
                    type: string
                    example: Γιάννης
        '400':
          description: Missing username or password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid username or password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/me:
    get:
      summary: Get logged-in user profile
      description: Returns the profile information of the currently authenticated user (student, professor, or secretary).
      tags:
        - Auth
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    example: 64f1c2c5a7e8a21b9c123456
                  username:
                    type: string
                    example: stud1
                  name:
                    type: string
                    example: Γιάννης
                  surname:
                    type: string
                    example: Παπαδόπουλος
                  role:
                    type: string
                    example: student
                  email:
                    type: string
                    example: giannis@example.com
        '401':
          description: Unauthorized - No token provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /Professor:
    post:
      summary: Create a new Professor
      tags:
        - Professor
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProfessorRequest'
      responses:
        '201':
          description: Professor created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Professor'
        '400':
          description: Bad request (e.g. username exists)

  /Professor/{username}:
    get:
      summary: Get a Professor by username
      tags:
        - Professor
      security:
        - bearerAuth: []
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          example: prof1
      responses:
        '200':
          description: Professor found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Professor'
        '404':
          description: Professor not found

    put:
      summary: Update a Professor by username
      tags:
        - Professor
      security:
        - bearerAuth: []
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          example: prof1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfessorRequest'
      responses:
        '200':
          description: Professor updated successfully
        '404':
          description: Professor not found

    delete:
      summary: Delete a Professor by username
      tags:
        - Professor
      security:
        - bearerAuth: []
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          example: prof1
      responses:
        '200':
          description: Professor deleted successfully
        '404':
          description: Professor not found

  /secretary:
    post:
      summary: Create a new secretary user
      tags:
        - Secretary
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
                - name
                - email
              properties:
                username:
                  type: string
                  example: secr1
                password:
                  type: string
                  example: test1234
                name:
                  type: string
                  example: Ελένη Γραμματεία
                email:
                  type: string
                  format: email
                  example: eleni@upatras.gr
                department:
                  type: string
                  example: Μηχανικών Η/Υ
      responses:
        '201':
          description: Secretary created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Secretary'
        '400':
          description: Bad request (e.g. username exists)

  /secretary/{username}:
    get:
      summary: Get a secretary by username
      tags:
        - Secretary
      security:
        - bearerAuth: []
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          example: secr1
      responses:
        '200':
          description: Secretary found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Secretary'
        '404':
          description: Secretary not found

    put:
      summary: Update a secretary by username
      tags:
        - Secretary
      security:
        - bearerAuth: []
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          example: secr1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Νέα Γραμματεία
                email:
                  type: string
                  example: newemail@upatras.gr
                department:
                  type: string
                  example: Νέο Τμήμα
                password:
                  type: string
                  example: newpassword
      responses:
        '200':
          description: Secretary updated successfully
        '404':
          description: Secretary not found

    delete:
      summary: Delete a secretary by username
      tags:
        - Secretary
      security:
        - bearerAuth: []
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          example: secr1
      responses:
        '200':
          description: Secretary deleted successfully
        '404':
          description: Secretary not found

  /student:
    post:
      summary: Create a new student
      tags:
        - Student
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStudentRequest'
      responses:
        '201':
          description: Student created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '400':
          description: Bad request (e.g. username exists)

  /student/{username}:
    get:
      summary: Get a student by username
      tags:
        - Student
      security:
        - bearerAuth: []
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          example: stud1
      responses:
        '200':
          description: Student found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '404':
          description: Student not found

    put:
      summary: Update a student by username
      tags:
        - Student
      security:
        - bearerAuth: []
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          example: stud1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateStudentRequest'
      responses:
        '200':
          description: Student updated successfully
        '404':
          description: Student not found

    delete:
      summary: Delete a student by username
      tags:
        - Student
      security:
        - bearerAuth: []
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          example: stud1
      responses:
        '200':
          description: Student deleted successfully
        '404':
          description: Student not found

  /theses:
    post:
      summary: Create a new theses
      tags:
        - Theses
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateThesesRequest'
      responses:
        '201':
          description: Theses created successfully
        '400':
          description: Bad request
        '403':
          description: Not authorized

    get:
      summary: Get all theses
      tags:
        - Theses
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of theses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Theses'
        '401':
          description: Unauthorized

  /theses/{id}:
    get:
      summary: Get theses by ID
      tags:
        - Theses
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: 64f1c2c5a7e8a21b9c123456
      responses:
        '200':
          description: Theses found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Theses'
        '404':
          description: Theses not found

    put:
      summary: Update theses by ID
      tags:
        - Theses
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateThesesRequest'
      responses:
        '200':
          description: Theses updated successfully
        '404':
          description: Theses not found
        '403':
          description: Not authorized

    delete:
      summary: Delete theses by ID
      tags:
        - Theses
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Theses deleted successfully
        '404':
          description: Theses not found
        '403':
          description: Not authorized

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Professor:
      type: object
      properties:
        name:
          type: string
        surname:
          type: string
        topic:
          type: string
        landline:
          type: string
        mobile:
          type: string
        email:
          type: string
        department:
          type: string
        university:
          type: string
        username:
          type: string

    CreateProfessorRequest:
      type: object
      required:
        - username
        - password
        - name
        - surname
        - topic
        - landline
        - mobile
        - email
        - department
        - university
      properties:
        username:
          type: string
        password:
          type: string
        name:
          type: string
        surname:
          type: string
        topic:
          type: string
        landline:
          type: string
        mobile:
          type: string
        email:
          type: string
        department:
          type: string
        university:
          type: string

    UpdateProfessorRequest:
      type: object
      properties:
        name:
          type: string
        surname:
          type: string
        topic:
          type: string
        landline:
          type: string
        mobile:
          type: string
        email:
          type: string
        department:
          type: string
        university:
          type: string
        password:
          type: string

    ErrorResponse:
      type: object
      properties:
        error:
          type: string

    Secretary:
      type: object
      properties:
        _id:
          type: string
        username:
          type: string
        name:
          type: string
        email:
          type: string
        department:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string

    Student:
      type: object
      properties:
        _id:
          type: string
        username:
          type: string
        name:
          type: string
        surname:
          type: string
        student_number:
          type: string
        street:
          type: string
        number:
          type: string
        city:
          type: string
        postcode:
          type: string
        father_name:
          type: string
        landline_telephone:
          type: string
        mobile_telephone:
          type: string
        email:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string

    CreateStudentRequest:
      type: object
      required:
        - username
        - password
        - name
        - surname
        - student_number
        - email
      properties:
        username:
          type: string
        password:
          type: string
        name:
          type: string
        surname:
          type: string
        student_number:
          type: string
        street:
          type: string
        number:
          type: string
        city:
          type: string
        postcode:
          type: string
        father_name:
          type: string
        landline_telephone:
          type: string
        mobile_telephone:
          type: string
        email:
          type: string

    UpdateStudentRequest:
      type: object
      properties:
        name:
          type: string
        surname:
          type: string
        password:
          type: string
        student_number:
          type: string
        street:
          type: string
        number:
          type: string
        city:
          type: string
        postcode:
          type: string
        father_name:
          type: string
        landline_telephone:
          type: string
        mobile_telephone:
          type: string
        email:
          type: string

    Theses:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        description:
          type: string
        status:
          type: string
        assignedDate:
          type: string
        professor:
          type: string
        student:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string

    CreateThesesRequest:
      type: object
      required:
        - title
        - professor
        - student
      properties:
        title:
          type: string
        description:
          type: string
        status:
          type: string
        professor:
          type: string
        student:
          type: string

    UpdateThesesRequest:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        status:
          type: string
